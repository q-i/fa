
&НаКлиенте
Процедура Загрузить(Команда)
	
	Дата1 = Период.ДатаНачала;
	Дата2 = Период.ДатаОкончания;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Дата1", Дата1);
	ПараметрыЗагрузки.Вставить("Дата2", Дата2);
	ПараметрыЗагрузки.Вставить("Тикер", Тикер);
	
	ЗагрузитьНаСервере(ПараметрыЗагрузки);
	
	ПоказатьОповещениеПользователя("Загрузка котировок завершена!");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(ПараметрыЗагрузки)
	
	Цены.Очистить();
	
	ТаблицаКотировок = ПолучитьТаблицуКотировок(ПараметрыЗагрузки);
	
	Если ТаблицаКотировок = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать котировки для Тикер = " + ПараметрыЗагрузки.Тикер + "!");
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицыКотировок Из ТаблицаКотировок Цикл
		НоваяСтрока = Цены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыКотировок);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуКотировок(ПараметрыЗагрузки)
	
	ТаблицаКотировок = Новый ТаблицаЗначений;
	ТаблицаКотировок.Колонки.Добавить("Тикер");
	ТаблицаКотировок.Колонки.Добавить("Дата");
	ТаблицаКотировок.Колонки.Добавить("Цена");
	
	ПарамДата1 = ПараметрыЗагрузки.Дата1;
	ПарамДата2 = ПараметрыЗагрузки.Дата2;
	ПарамТикер = ПараметрыЗагрузки.Тикер;
	
	Сервер = "iss.moex.com";
	ИмяКолонкиЦенаЗакрытия = "LEGALCLOSEPRICE";
	ИдРежимаТоргов = "TQBR";
	
	АдресСтраницы = Неопределено;
	ПараметрыЗапросов = Новый Массив;
	
	Если ЗначениеЗаполнено(ПарамТикер) Тогда
		// КОТИРОВКИ ПО ВЫБРАННОМУ ТИКЕРУ
		// /iss/history/engines/[engine]/markets/[market]/boards/[board]/securities/[security]
		// (https://iss.moex.com/iss/reference/65)
		// TQBR(example):
		// http://iss.moex.com/iss/history/engines/stock/markets/shares/boards/tqbr/securities/GAZP?from=2020-08-01&till=2020-08-31
		
		АдресСтраницы = "/iss/history/engines/stock/markets/shares/boards/[ИдРежимаТоргов]/securities/[Тикер].json?from=[Дата1]&till=[Дата2]";
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("ИдРежимаТоргов", ИдРежимаТоргов);
		ЗначенияПараметров.Вставить("ИмяКолонкиЦенаЗакрытия", ИмяКолонкиЦенаЗакрытия);
		ЗначенияПараметров.Вставить("Тикер", ПарамТикер);
		ЗначенияПараметров.Вставить("Дата1", Формат(ПарамДата1, "ДФ=yyyy-MM-dd"));
		ЗначенияПараметров.Вставить("Дата2", Формат(ПарамДата2, "ДФ=yyyy-MM-dd"));
		ПараметрыЗапросов.Добавить(ЗначенияПараметров);
		
	Иначе 
		// ВСЕ КОТИРОВКИ
		// /iss/history/engines/[engine]/markets/[market]/boards/[board]/securities
		// (https://iss.moex.com/iss/reference/64)
		// TQBR(example):
		// http://iss.moex.com/iss/history/engines/stock/markets/shares/boards/tqbr/securities?date=2020-08-03
		
		АдресСтраницы = "/iss/history/engines/stock/markets/shares/boards/[ИдРежимаТоргов]/securities.json?date=[ДатаКотировок]";
		
		Сутки = 24 * 60 * 60;
		
		ТекДата = ПарамДата1;
		Пока ТекДата <= ПарамДата2 Цикл
			
			ЗначенияПараметров = Новый Соответствие;
			ЗначенияПараметров.Вставить("ИдРежимаТоргов", ИдРежимаТоргов);
			ЗначенияПараметров.Вставить("ИмяКолонкиЦенаЗакрытия", ИмяКолонкиЦенаЗакрытия);
			ЗначенияПараметров.Вставить("ДатаКотировок", Формат(ТекДата, "ДФ=yyyy-MM-dd"));
			ПараметрыЗапросов.Добавить(ЗначенияПараметров);
			
			ТекДата = ТекДата + Сутки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если АдресСтраницы = Неопределено 
		Или ПараметрыЗапросов.Количество() = 0 Тогда
		ВызватьИсключение "ВНУТРЕННЯЯ ОШИБКА 2222! НЕ ЗАДАНЫ ЗНАЧЕНИЯ ОБЯЗАТЕЛЬНЫХ ПЕРЕМЕННЫХ!";
	КонецЕсли; 
	
	АдресСтраницы = АдресСтраницы + "&iss.meta=off"; // отключаем вывод мета-информации
	АдресСтраницы = АдресСтраницы + "&history.columns=TRADEDATE,SECID,[ИмяКолонкиЦенаЗакрытия]"; // выводим только нужные нам колонки
	АдресСтраницы = АдресСтраницы + "&iss.json=extended"; // используем расширенный формат json
	
	
	Для Каждого ЗначенияПараметров Из ПараметрыЗапросов Цикл
		
		ТекАдресСтраницы = АдресСтраницы;
		
		Для Каждого КлючИЗначение Из ЗначенияПараметров Цикл
			ТекАдресСтраницы = СтрЗаменить(ТекАдресСтраницы, "[" + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
		КонецЦикла; 
		
		ЕстьСледующаяПорцияДанных = Истина;
		Старт = 0;
		Пока ЕстьСледующаяПорцияДанных Цикл
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ТекАдресСтраницы = ТекАдресСтраницы + ?(Старт > 0, "&start=" + Формат(Старт, "ЧГ="), "");
			
			HTTPСоединение = Новый HTTPСоединение(Сервер);
			HTTPЗапрос = Новый HTTPЗапрос(ТекАдресСтраницы);
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
			Если HTTPОтвет.КодСостояния <> 200 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сервер " + Сервер + " вернул код ошибки " + HTTPОтвет.КодСостояния);
				УдалитьФайлы(ИмяВременногоФайла);
				Возврат Неопределено;
			КонецЕсли;
			
			ЕстьСледующаяПорцияДанных = Ложь;
			КолвоПрочитано = 0;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
			ДокументJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
			Для Каждого Раздел Из ДокументJSON Цикл
				history = Раздел.Получить("history");
				Если history = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого СтрокаТаблицы Из history Цикл
					ТекЦена = СтрокаТаблицы.Получить(ИмяКолонкиЦенаЗакрытия);
					Если ТекЦена <> Неопределено Тогда
						НоваяСтрока = ТаблицаКотировок.Добавить();
						НоваяСтрока.Тикер = СтрокаТаблицы.Получить("SECID");
						НоваяСтрока.Дата = ПрочитатьДатуJSON(СтрокаТаблицы.Получить("TRADEDATE"), ФорматДатыJSON.ISO);
						НоваяСтрока.Цена = ТекЦена;
					КонецЕсли; 
					КолвоПрочитано = КолвоПрочитано + 1;
				КонецЦикла;
				history_cursor = Раздел.Получить("history.cursor");
				Если history_cursor <> Неопределено Тогда
					hs_INDEX	= history_cursor[0].Получить("INDEX");
					hs_PAGESIZE	= history_cursor[0].Получить("PAGESIZE");
					hs_TOTAL	= history_cursor[0].Получить("TOTAL");
					ЕстьСледующаяПорцияДанных = ( (hs_INDEX + hs_PAGESIZE) < hs_TOTAL );
					Старт = Старт + hs_PAGESIZE;
				Иначе 
					ЕстьСледующаяПорцияДанных = (КолвоПрочитано > 0);
					Старт = Старт + КолвоПрочитано;
				КонецЕсли;
			КонецЦикла;
			
			ЧтениеJSON.Закрыть();
			
			УдалитьФайлы(ИмяВременногоФайла);
		
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат ТаблицаКотировок;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ВидЦен = Справочники.ВидыЦен.Учетная;
	
	Если Параметры.Свойство("Дата1") Тогда
		Дата1 = Параметры.Дата1;
	Иначе 
		Дата1 = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли; 
	
	Если Параметры.Свойство("Дата2") Тогда
		Дата2 = Параметры.Дата2;
	Иначе 
		Дата2 = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если Параметры.Свойство("Тикер") Тогда
		Тикер = Параметры.Тикер;
	КонецЕсли; 
	
	ОткрытоВРежимеВыбора = (Параметры.Свойство("ОткрытоВРежимеВыбора") И Параметры.ОткрытоВРежимеВыбора);
	
	Период.ДатаНачала = Дата1;
	Период.ДатаОкончания = Дата2;
	
	ГодКотировок = НачалоГода(ТекущаяДатаСеанса());
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(ОткрытоВРежимеВыбора, 
		Элементы.СтраницаЗагрузкиВРежимеВыбора,
		Элементы.СтраницаЗагрузкаПоследнихКотировокГода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ОткрытоВРежимеВыбора И Элемент.ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		//Закрыть(Цены[ВыбраннаяСтрока].Цена);
		Закрыть(Элемент.ТекущиеДанные.Цена)
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоследниеКотировкиВыбранногоГодаНаСервере(ПараметрыЗагрузки)
	
	ТекДата = ТекущаяДатаСеанса();
	Если НачалоГода(ГодКотировок) < НачалоГода(ТекДата) Тогда
		Дата2 = КонецГода(ГодКотировок);
	Иначе 
		Дата2 = ТекДата;
	КонецЕсли; 
	Дата1 = Дата2 - 30 * 24 * 60 * 60;
	
	ПараметрыЗагрузки.Дата1 = Дата1;
	ПараметрыЗагрузки.Дата2 = Дата2;
	
	ТаблицаКотировок = ПолучитьТаблицуКотировок(ПараметрыЗагрузки);
	ТаблицаКотировок.Индексы.Добавить("Тикер");
	
	НачалоГодаКотировок = НачалоГода(ГодКотировок);
	КонецГодаКотировок = КонецГода(ГодКотировок);
	
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводПоказателейПоказатели.Ссылка КАК Ссылка,
	|	ВводПоказателейПоказатели.Ссылка.Дата КАК Дата,
	|	ВводПоказателейПоказатели.Ссылка.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_ВсеДокументыУстановкиКотировокВыбранногоГода
	|ИЗ
	|	Документ.ВводПоказателей.Показатели КАК ВводПоказателейПоказатели
	|ГДЕ
	|	ВводПоказателейПоказатели.Ссылка.Периодичность В (&ПериодичностьНет, &ПустаяПериодичность)
	|	И ВводПоказателейПоказатели.Ссылка.Дата МЕЖДУ &НачалоГодаКотировок И &КонецГодаКотировок
	|	И ВводПоказателейПоказатели.Ссылка.Проведен
	|	И ВводПоказателейПоказатели.Показатель В(&ПоказателиЦен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументы.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ВТ_ВсеДокументы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ПоследниеДокументыУстановкиКотировокВыбранногоГода
	|ИЗ
	|	ВТ_ВсеДокументыУстановкиКотировокВыбранногоГода КАК ВТ_ВсеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ВсеДокументы.Контрагент КАК Контрагент,
	|			МАКСИМУМ(ВТ_ВсеДокументы.Дата) КАК Дата
	|		ИЗ
	|			ВТ_ВсеДокументыУстановкиКотировокВыбранногоГода КАК ВТ_ВсеДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ВсеДокументы.Контрагент) КАК ВложенныйЗапрос
	|		ПО ВТ_ВсеДокументы.Контрагент = ВложенныйЗапрос.Контрагент
	|			И ВТ_ВсеДокументы.Дата = ВложенныйЗапрос.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеДокументы.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ТикерАО КАК ТикерАО,
	|	Контрагенты.ТикерАП КАК ТикерАП,
	|	ВТ_ПоследниеДокументы.Ссылка КАК ДокументУстановкиКотировок
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДокументыУстановкиКотировокВыбранногоГода КАК ВТ_ПоследниеДокументы
	|		ПО Контрагенты.Ссылка = ВТ_ПоследниеДокументы.Контрагент
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И &ДопУсловия";
	Запрос.УстановитьПараметр("ПериодичностьНет"	, Перечисления.Периодичность.Нет);
	Запрос.УстановитьПараметр("ПустаяПериодичность"	, Перечисления.Периодичность.ПустаяСсылка());
	Запрос.УстановитьПараметр("НачалоГодаКотировок"	, НачалоГодаКотировок);
	Запрос.УстановитьПараметр("КонецГодаКотировок"	, КонецГодаКотировок);
	ПоказателиЦен = Новый Массив;
	ПоказателиЦен.Добавить(ПоказательЦенаАО);
	ПоказателиЦен.Добавить(ПоказательЦенаАП);
	Запрос.УстановитьПараметр("ПоказателиЦен"		, ПоказателиЦен);
	
	ДопУсловия = "";
	Если ФлагНеСоздаватьНовыеДокументы Тогда
		ДопУсловия = ?(ПустаяСтрока(ДопУсловия), "", " И ")
			+ "НЕ ВТ_ПоследниеДокументы.Ссылка ЕСТЬ NULL"
	КонецЕсли;
	Если НЕ ПустаяСтрока(ДопУсловия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", ДопУсловия);
	Иначе 
		Запрос.УстановитьПараметр("ДопУсловия", Истина);
	КонецЕсли; 	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нечего загружать!");
		Возврат;
	КонецЕсли; 
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Котировки = Новый Соответствие; 
		ДатаКотировок = Дата(1, 1, 1);
		ПоказателиИТикеры = Новый Соответствие;
		Если ЗначениеЗаполнено(ПоказательЦенаАО) И ЗначениеЗаполнено(Выборка.ТикерАО) Тогда
			ПоказателиИТикеры.Вставить(ПоказательЦенаАО, Выборка.ТикерАО);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПоказательЦенаАП) И ЗначениеЗаполнено(Выборка.ТикерАП) Тогда
			ПоказателиИТикеры.Вставить(ПоказательЦенаАП, Выборка.ТикерАП);
		КонецЕсли; 
		Для Каждого КлючИЗначение Из ПоказателиИТикеры Цикл
			ТекПоказатель = КлючИЗначение.Ключ;
			ТекТикер = КлючИЗначение.Значение;
			ТЗ = ТаблицаКотировок.Скопировать(Новый Структура("Тикер", ТекТикер));
			Если ТЗ.Количество() > 0 Тогда
				ТЗ.Сортировать("Дата");
				ПоследняяСтрока = ТЗ[ТЗ.Количество() - 1];
				Котировки.Вставить(ТекПоказатель, ПоследняяСтрока.Цена);
				ДатаКотировок = Макс(ДатаКотировок, ПоследняяСтрока.Дата);
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти котировки для тикера = " + ТекТикер);
			КонецЕсли; 
		КонецЦикла; 
		Если Котировки.Количество() = 0 ИЛИ (НЕ ЗначениеЗаполнено(ДатаКотировок)) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить котировки для контрагента = " + Выборка.Контрагент);
			Продолжить;
		КонецЕсли;
		Если ДатаКотировок < НачалоГодаКотировок Или ДатаКотировок > КонецГодаКотировок Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата котировок для контрагента = " + Выборка.Контрагент + " находится за пределами года (дата котировок = " + ДатаКотировок + ")");
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Выборка.ДокументУстановкиКотировок) Тогда
			ДокОбъект = Выборка.ДокументУстановкиКотировок.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.ВводПоказателей.СоздатьДокумент();
			ДокОбъект.Контрагент = Выборка.Контрагент;
			ДокОбъект.Валюта = Справочники.Валюты.RUB;
			ДокОбъект.Множитель = 1;
			ДокОбъект.Периодичность = Перечисления.Периодичность.Нет;
			ДокОбъект.Комментарий = "Цена акций" + ?(Дата2 = ТекДата, " текущая", "");
		КонецЕсли; 
		Для Каждого КлючИЗначение Из Котировки Цикл
			ТекПоказатель = КлючИЗначение.Ключ;
			ТекЦена = КлючИЗначение.Значение;
			СтрокаТабЧасти = ДокОбъект.Показатели.Найти(ТекПоказатель, "Показатель");
			Если СтрокаТабЧасти = Неопределено Тогда
				СтрокаТабЧасти = ДокОбъект.Показатели.Добавить();
				СтрокаТабЧасти.Показатель = ТекПоказатель;
			КонецЕсли;
			Если СтрокаТабЧасти.ЗначениеПоказателя <> ТекЦена Тогда
				СтрокаТабЧасти.ЗначениеПоказателя = ТекЦена;
				СтрокаТабЧасти.Комментарий = "# Загружено " + ТекДата;
			КонецЕсли; 
			ТекРазрядность = ОбщегоНазначенияКлиентСервер.ПолучитьРазрядностьДробнойЧасти(СтрокаТабЧасти.ЗначениеПоказателя);
			Если ТекРазрядность > ДокОбъект.РазрядностьДробнойЧасти Тогда
				ДокОбъект.РазрядностьДробнойЧасти = ТекРазрядность;
			КонецЕсли; 
		КонецЦикла;
		Если НачалоДня(ДокОбъект.Дата) <> НачалоДня(ДатаКотировок) Тогда
			ДокОбъект.Дата = ДатаКотировок;
		КонецЕсли; 
		Если ДокОбъект.РазрядностьДробнойЧасти < 2 Тогда
			ДокОбъект.РазрядностьДробнойЧасти = 2; // всегда с копейками
		КонецЕсли; 
		Если ДокОбъект.Модифицированность() Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоследниеКотировкиВыбранногоГода(Команда)
	
	Отказ = Ложь;
	СтруктураОбязательныхРеквизитов = Новый Структура("ГодКотировок, ПоказательЦенаАО, ПоказательЦенаАП");
	Для Каждого КлючИЗначение Из СтруктураОбязательныхРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задано значение реквизита " + ИмяРеквизита + "!", , , ИмяРеквизита, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Дата1", Неопределено);
	ПараметрыЗагрузки.Вставить("Дата2", Неопределено);
	ПараметрыЗагрузки.Вставить("Тикер", "");

	ЗагрузитьПоследниеКотировкиВыбранногоГодаНаСервере(ПараметрыЗагрузки);
	
	ПоказатьОповещениеПользователя("Загрузка котировок завершена!");
	
КонецПроцедуры
