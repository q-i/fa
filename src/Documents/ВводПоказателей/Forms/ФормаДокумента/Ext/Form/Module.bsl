
&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.Контрагент.АвтоОтметкаНезаполненного = Истина;
	Элементы.Периодичность.АвтоОтметкаНезаполненного = Истина;
	
	ФорматРедактированияДаты = ОбщегоНазначенияКлиентСервер.ПолучитьФорматРедактированияДаты(Объект.Периодичность);
	Элементы.ПоказателиДата.ФорматРедактирования = ФорматРедактированияДаты;
	Элементы.ПоказателиДата.Формат = ФорматРедактированияДаты;
	Если Объект.УказыватьДатуВТабЧасти Тогда
		ФорматРедактированияДляГода = ОбщегоНазначенияКлиентСервер.ПолучитьФорматРедактированияДаты(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
		Элементы.Дата.ФорматРедактирования = ФорматРедактированияДляГода;
		Элементы.Дата.Формат = ФорматРедактированияДляГода;
	Иначе 
		Элементы.Дата.ФорматРедактирования = ФорматРедактированияДаты;
		Элементы.Дата.Формат = ФорматРедактированияДаты;
	КонецЕсли; 
	
	СЗ = Элементы.Множитель.СписокВыбора;
	НайденныйЭлемент = СЗ.НайтиПоЗначению(Объект.Множитель);
	Элементы.ПредставлениеМножителя.Заголовок = ?(НайденныйЭлемент <> Неопределено, "(" + НайденныйЭлемент.Представление + ")", "");
	
	НовыйФормат = "ЧДЦ=" + Формат(Объект.РазрядностьДробнойЧасти, "ЧГ=");
	Если Элементы.ПоказателиЗначениеПоказателя.Формат <> НовыйФормат Тогда
		Элементы.ПоказателиЗначениеПоказателя.Формат = НовыйФормат;
		Элементы.Показатели.Обновить();
	КонецЕсли;
	
	Элементы.ПоказателиДата.Видимость = Объект.УказыватьДатуВТабЧасти;
	Элементы.ПоказателиСтандартОтчетности.Видимость = Объект.УказыватьСтандартОтчетностиВТабЧасти;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Множитель) Тогда
			Объект.Множитель = 1;
		КонецЕсли; 
		
		Объект.РазрядностьДробнойЧасти = 0; // Метаданные.ОпределяемыеТипы.ТипЗначенияПоказателя.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		Для Каждого СтрокаТабЧасти Из Объект.Показатели Цикл
			ТекРазрядность = ОбщегоНазначенияКлиентСервер.ПолучитьРазрядностьДробнойЧасти(СтрокаТабЧасти.ЗначениеПоказателя);
			Если ТекРазрядность > Объект.РазрядностьДробнойЧасти Тогда
				Объект.РазрядностьДробнойЧасти = ТекРазрядность;
			КонецЕсли; 
		КонецЦикла;
		
		Объект.Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
		
	КонецЕсли; 
	
	РазрешенАвторасчет = ОбщегоНазначенияВызовСервера.ПолучитьРазрешенАвторасчет();
	
	СЗ = Элементы.Множитель.СписокВыбора;
	СЗ.Добавить(1, "ед");
	СЗ.Добавить(1000, "тыс");
	СЗ.Добавить(1000000, "млн");
	СЗ.Добавить(1000000000, "млрд");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиИзГруппыНаСервере(ГруппаПоказателей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Родитель = &ГруппаПоказателей
	|	И НЕ Показатели.ЭтоГруппа
	|	И НЕ Показатели.Расчетный
	|	И НЕ Показатели.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатели.Порядок";
	Запрос.УстановитьПараметр("ГруппаПоказателей", ГруппаПоказателей);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Объект.Показатели.НайтиСтроки(Новый Структура("Показатель", Выборка.Ссылка)).Количество() = 0 Тогда
			НоваяСтрока = Объект.Показатели.Добавить(); 
			НоваяСтрока.Показатель = Выборка.Ссылка;
		КонецЕсли; 
	КонецЦикла; 
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказателиИзГруппы(Команда)
	
	ОткрытьФорму("Справочник.Показатели.ФормаВыбораГруппы",, Элементы.Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Показатели") Тогда
		ДобавитьПоказателиИзГруппыНаСервере(ВыбранноеЗначение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура МножительПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиЗначениеПоказателяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	ТекПоказатель = ТекущиеДанные.Показатель;
	ПересчитатьПоказателиНаСервере(ТекПоказатель);
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьДатуВТабЧастиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьСтандартОтчетностиВТабЧастиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиДатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	Дата1 = НачалоГода(Объект.Дата);
	Дата2 = КонецГода(Объект.Дата);
	ТекДата = ТекущиеДанные.Дата;
	Если ТекДата <= Дата1 Или Дата2 <= ТекДата Тогда
		НомСтр = Объект.Показатели.Индекс(ТекущиеДанные);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата находится за пределами года документа!" ,, "Объект.Показатели[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].Дата");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПоказателиНаСервере(ИзмененныйПоказатель)
	
	// АВТОРАСЧЕТ
	Если РазрешенАвторасчет Тогда
		ЗначенияПоказателей = Новый Соответствие;
		Для Каждого СтрокаТабЧасти Из Объект.Показатели Цикл
			ЗначенияПоказателей.Вставить(СтрокаТабЧасти.Показатель, СтрокаТабЧасти.ЗначениеПоказателя);
		КонецЦикла; 
		Для Каждого СтрокаТабЧасти Из Объект.Показатели Цикл
			Если СтрокаТабЧасти.Показатель <> ИзмененныйПоказатель Тогда
				НовоеЗначение = ОбщегоНазначенияСервер.РассчитатьЗначениеПоказателя(ЗначенияПоказателей, СтрокаТабЧасти.Показатель);
				Если НовоеЗначение <> Неопределено
					И СтрокаТабЧасти.ЗначениеПоказателя <> НовоеЗначение Тогда
					СтрокаТабЧасти.ЗначениеПоказателя = НовоеЗначение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрядностьДробнойЧастиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.УстановитьРазрешенАвторасчет(РазрешенАвторасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуАО(Команда)
	
	ЗаполнитьЦенуАкции("АО");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуАП(Команда)
	
	ЗаполнитьЦенуАкции("АП");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуАкции(ВидАкции)
	
	Тикер = ПолучитьТикерНаСервере(ВидАкции);
	Если ПустаяСтрока(Тикер) Тогда
		ПоказатьОповещениеПользователя("Не удалось получить тикер " + ВидАкции + " для контрагента этого документа!");
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата1", Объект.Дата - 10 * 24 * 60 *60);
	ПараметрыФормы.Вставить("Дата2", Объект.Дата);
	ПараметрыФормы.Вставить("Тикер", Тикер);
	ПараметрыФормы.Вставить("ОткрытоВРежимеВыбора", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыЗагрузкиКотировок", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ЗагрузкаКотировокММВБ.Форма", ПараметрыФормы, Элементы.Показатели, Истина,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗагрузкиКотировок(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РезультатЗакрытия <> Неопределено Тогда
		ТекущиеДанные.ЗначениеПоказателя = РезультатЗакрытия;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКомментарииСтрок(Команда)
	
	Для Каждого СтрокаТабЧасти Из Объект.Показатели Цикл
		Если СтрокаТабЧасти.Комментарий <> "" Тогда
			СтрокаТабЧасти.Комментарий = "";
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТикерНаСервере(ВидАкции)
	
	Если ВидАкции = "АО" Тогда
		Возврат Объект.Контрагент.ТикерАО;
	ИначеЕсли ВидАкции = "АП" Тогда
		Возврат Объект.Контрагент.ТикерАП;
	КонецЕсли; 
	
	ВызватьИсключение "Недопустимый параметр функции ПолучитьТикерНаСервере(): ВидАкции = " + ВидАкции; 
	
КонецФункции

